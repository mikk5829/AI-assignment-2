// Signature file for parser generated by fsyacc
module SecurityAnalysisParser
type token = 
  | ASSIGN
  | COMMA
  | EOF
  | STRING of (string)
type tokenId = 
    | TOKEN_ASSIGN
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startinit_Sec_C_Expression
    | NONTERM_init_Sec_C_Expression
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val init_Sec_C_Expression : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (InitSecC) 
