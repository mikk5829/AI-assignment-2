// Signature file for parser generated by fsyacc
module SignAnalysisParser
type token = 
  | POSITIVE
  | NEGATIVE
  | ZERO
  | LCUR
  | RCUR
  | ASSIGN
  | COMMA
  | EOF
  | STRING of (string)
type tokenId = 
    | TOKEN_POSITIVE
    | TOKEN_NEGATIVE
    | TOKEN_ZERO
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_ASSIGN
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startinit_Sign_C_Expression
    | NONTERM_init_Sign_C_Expression
    | NONTERM_init_Sign_A_Expression
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val init_Sign_C_Expression : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (InitSignC) 
