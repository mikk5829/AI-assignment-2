// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsp"

open TypesAST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | NOT
  | BIIMPLICATION
  | IMPLICATION
  | COMMA
  | MULTIPLY
  | DIVIDE
  | ADDITION
  | SUBTRACT
  | ZERO
  | POWER
  | TRUE
  | FALSE
  | AND
  | OR
  | EQUAL
  | NEGEQUAL
  | LT
  | LTE
  | GT
  | GTE
  | LPAR
  | RPAR
  | LCUR
  | RCUR
  | LBRA
  | RBRA
  | ASSIGN
  | ASSIGNARRAY
  | SEQUENCE
  | SKIP
  | IF
  | FI
  | DO
  | OD
  | CONDITION
  | ELSE
  | EOF
  | NUM of (float)
  | VAR of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_NOT
    | TOKEN_BIIMPLICATION
    | TOKEN_IMPLICATION
    | TOKEN_COMMA
    | TOKEN_MULTIPLY
    | TOKEN_DIVIDE
    | TOKEN_ADDITION
    | TOKEN_SUBTRACT
    | TOKEN_ZERO
    | TOKEN_POWER
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EQUAL
    | TOKEN_NEGEQUAL
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_GT
    | TOKEN_GTE
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_ASSIGN
    | TOKEN_ASSIGNARRAY
    | TOKEN_SEQUENCE
    | TOKEN_SKIP
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_CONDITION
    | TOKEN_ELSE
    | TOKEN_EOF
    | TOKEN_NUM
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startcExpression
    | NONTERM_dExpression
    | NONTERM_gcExpression
    | NONTERM_cExpression
    | NONTERM_aExpression
    | NONTERM_bExpression

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | NOT  -> 0 
  | BIIMPLICATION  -> 1 
  | IMPLICATION  -> 2 
  | COMMA  -> 3 
  | MULTIPLY  -> 4 
  | DIVIDE  -> 5 
  | ADDITION  -> 6 
  | SUBTRACT  -> 7 
  | ZERO  -> 8 
  | POWER  -> 9 
  | TRUE  -> 10 
  | FALSE  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | EQUAL  -> 14 
  | NEGEQUAL  -> 15 
  | LT  -> 16 
  | LTE  -> 17 
  | GT  -> 18 
  | GTE  -> 19 
  | LPAR  -> 20 
  | RPAR  -> 21 
  | LCUR  -> 22 
  | RCUR  -> 23 
  | LBRA  -> 24 
  | RBRA  -> 25 
  | ASSIGN  -> 26 
  | ASSIGNARRAY  -> 27 
  | SEQUENCE  -> 28 
  | SKIP  -> 29 
  | IF  -> 30 
  | FI  -> 31 
  | DO  -> 32 
  | OD  -> 33 
  | CONDITION  -> 34 
  | ELSE  -> 35 
  | EOF  -> 36 
  | NUM _ -> 37 
  | VAR _ -> 38 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_NOT 
  | 1 -> TOKEN_BIIMPLICATION 
  | 2 -> TOKEN_IMPLICATION 
  | 3 -> TOKEN_COMMA 
  | 4 -> TOKEN_MULTIPLY 
  | 5 -> TOKEN_DIVIDE 
  | 6 -> TOKEN_ADDITION 
  | 7 -> TOKEN_SUBTRACT 
  | 8 -> TOKEN_ZERO 
  | 9 -> TOKEN_POWER 
  | 10 -> TOKEN_TRUE 
  | 11 -> TOKEN_FALSE 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_EQUAL 
  | 15 -> TOKEN_NEGEQUAL 
  | 16 -> TOKEN_LT 
  | 17 -> TOKEN_LTE 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_GTE 
  | 20 -> TOKEN_LPAR 
  | 21 -> TOKEN_RPAR 
  | 22 -> TOKEN_LCUR 
  | 23 -> TOKEN_RCUR 
  | 24 -> TOKEN_LBRA 
  | 25 -> TOKEN_RBRA 
  | 26 -> TOKEN_ASSIGN 
  | 27 -> TOKEN_ASSIGNARRAY 
  | 28 -> TOKEN_SEQUENCE 
  | 29 -> TOKEN_SKIP 
  | 30 -> TOKEN_IF 
  | 31 -> TOKEN_FI 
  | 32 -> TOKEN_DO 
  | 33 -> TOKEN_OD 
  | 34 -> TOKEN_CONDITION 
  | 35 -> TOKEN_ELSE 
  | 36 -> TOKEN_EOF 
  | 37 -> TOKEN_NUM 
  | 38 -> TOKEN_VAR 
  | 41 -> TOKEN_end_of_input
  | 39 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startcExpression 
    | 1 -> NONTERM_dExpression 
    | 2 -> NONTERM_dExpression 
    | 3 -> NONTERM_gcExpression 
    | 4 -> NONTERM_gcExpression 
    | 5 -> NONTERM_cExpression 
    | 6 -> NONTERM_cExpression 
    | 7 -> NONTERM_cExpression 
    | 8 -> NONTERM_cExpression 
    | 9 -> NONTERM_cExpression 
    | 10 -> NONTERM_cExpression 
    | 11 -> NONTERM_cExpression 
    | 12 -> NONTERM_cExpression 
    | 13 -> NONTERM_aExpression 
    | 14 -> NONTERM_aExpression 
    | 15 -> NONTERM_aExpression 
    | 16 -> NONTERM_aExpression 
    | 17 -> NONTERM_aExpression 
    | 18 -> NONTERM_aExpression 
    | 19 -> NONTERM_aExpression 
    | 20 -> NONTERM_aExpression 
    | 21 -> NONTERM_aExpression 
    | 22 -> NONTERM_aExpression 
    | 23 -> NONTERM_aExpression 
    | 24 -> NONTERM_aExpression 
    | 25 -> NONTERM_aExpression 
    | 26 -> NONTERM_aExpression 
    | 27 -> NONTERM_bExpression 
    | 28 -> NONTERM_bExpression 
    | 29 -> NONTERM_bExpression 
    | 30 -> NONTERM_bExpression 
    | 31 -> NONTERM_bExpression 
    | 32 -> NONTERM_bExpression 
    | 33 -> NONTERM_bExpression 
    | 34 -> NONTERM_bExpression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 41 
let _fsyacc_tagOfErrorTerminal = 39

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | NOT  -> "NOT" 
  | BIIMPLICATION  -> "BIIMPLICATION" 
  | IMPLICATION  -> "IMPLICATION" 
  | COMMA  -> "COMMA" 
  | MULTIPLY  -> "MULTIPLY" 
  | DIVIDE  -> "DIVIDE" 
  | ADDITION  -> "ADDITION" 
  | SUBTRACT  -> "SUBTRACT" 
  | ZERO  -> "ZERO" 
  | POWER  -> "POWER" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | EQUAL  -> "EQUAL" 
  | NEGEQUAL  -> "NEGEQUAL" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | GT  -> "GT" 
  | GTE  -> "GTE" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LCUR  -> "LCUR" 
  | RCUR  -> "RCUR" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | ASSIGN  -> "ASSIGN" 
  | ASSIGNARRAY  -> "ASSIGNARRAY" 
  | SEQUENCE  -> "SEQUENCE" 
  | SKIP  -> "SKIP" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | CONDITION  -> "CONDITION" 
  | ELSE  -> "ELSE" 
  | EOF  -> "EOF" 
  | NUM _ -> "NUM" 
  | VAR _ -> "VAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | NOT  -> (null : System.Object) 
  | BIIMPLICATION  -> (null : System.Object) 
  | IMPLICATION  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | MULTIPLY  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | ADDITION  -> (null : System.Object) 
  | SUBTRACT  -> (null : System.Object) 
  | ZERO  -> (null : System.Object) 
  | POWER  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NEGEQUAL  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GTE  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LCUR  -> (null : System.Object) 
  | RCUR  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | ASSIGNARRAY  -> (null : System.Object) 
  | SEQUENCE  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | CONDITION  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 3us; 65535us; 6us; 3us; 16us; 4us; 23us; 5us; 3us; 65535us; 13us; 10us; 28us; 11us; 30us; 12us; 3us; 65535us; 0us; 1us; 20us; 18us; 27us; 19us; 30us; 65535us; 0us; 21us; 6us; 2us; 8us; 48us; 13us; 48us; 16us; 2us; 20us; 21us; 22us; 25us; 23us; 2us; 27us; 21us; 28us; 48us; 30us; 48us; 34us; 35us; 55us; 36us; 56us; 37us; 57us; 38us; 58us; 39us; 59us; 40us; 60us; 41us; 61us; 42us; 62us; 43us; 63us; 44us; 65us; 45us; 67us; 46us; 68us; 47us; 70us; 49us; 71us; 50us; 72us; 51us; 73us; 52us; 74us; 53us; 75us; 54us; 5us; 65535us; 8us; 9us; 13us; 7us; 28us; 7us; 30us; 7us; 63us; 76us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 5us; 9us; 13us; 44us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 3us; 0us; 6us; 10us; 11us; 1us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 2us; 2us; 2us; 2us; 2us; 5us; 2us; 2us; 7us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 2us; 4us; 4us; 2us; 4us; 11us; 2us; 4us; 12us; 1us; 4us; 2us; 5us; 14us; 1us; 5us; 1us; 5us; 1us; 5us; 3us; 6us; 6us; 10us; 3us; 6us; 10us; 10us; 1us; 6us; 12us; 7us; 8us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 2us; 7us; 8us; 1us; 7us; 1us; 7us; 11us; 8us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 11us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 11us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 11us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 11us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 11us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 11us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 24us; 25us; 26us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 24us; 25us; 26us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 24us; 25us; 26us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 17us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 28us; 29us; 30us; 31us; 32us; 33us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 24us; 25us; 26us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 25us; 26us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 26us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 28us; 29us; 30us; 31us; 32us; 33us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 28us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 29us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 30us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 31us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 32us; 11us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 24us; 25us; 26us; 33us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 2us; 23us; 34us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 34us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 6us; 18us; 21us; 24us; 27us; 29us; 31us; 33us; 35us; 38us; 41us; 44us; 46us; 49us; 51us; 53us; 55us; 59us; 63us; 65us; 78us; 81us; 83us; 85us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 127us; 139us; 151us; 163us; 175us; 187us; 199us; 211us; 223us; 241us; 253us; 265us; 277us; 294us; 306us; 318us; 330us; 342us; 354us; 366us; 368us; 370us; 372us; 374us; 376us; 378us; 380us; 382us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 399us; 401us; 403us; 405us; 407us; 409us; 411us; |]
let _fsyacc_action_rows = 78
let _fsyacc_actionTableElements = [|7us; 32768us; 0us; 34us; 20us; 62us; 29us; 26us; 30us; 28us; 32us; 30us; 37us; 32us; 38us; 14us; 2us; 49152us; 3us; 20us; 28us; 27us; 10us; 16385us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 0us; 16386us; 2us; 32768us; 3us; 6us; 23us; 17us; 2us; 32768us; 3us; 6us; 25us; 24us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 1us; 32768us; 34us; 8us; 5us; 32768us; 0us; 34us; 11us; 69us; 20us; 63us; 37us; 32us; 38us; 33us; 0us; 16387us; 1us; 16388us; 35us; 13us; 2us; 32768us; 31us; 29us; 35us; 13us; 2us; 32768us; 33us; 31us; 35us; 13us; 5us; 32768us; 0us; 34us; 11us; 69us; 20us; 63us; 37us; 32us; 38us; 33us; 1us; 16398us; 14us; 15us; 1us; 32768us; 22us; 16us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 0us; 16389us; 1us; 16390us; 28us; 27us; 1us; 16394us; 28us; 27us; 7us; 32768us; 0us; 34us; 20us; 62us; 29us; 26us; 30us; 28us; 32us; 30us; 37us; 32us; 38us; 14us; 11us; 32768us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 26us; 22us; 5us; 32768us; 0us; 34us; 20us; 62us; 24us; 23us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 0us; 16391us; 10us; 16392us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 0us; 16393us; 7us; 32768us; 0us; 34us; 20us; 62us; 29us; 26us; 30us; 28us; 32us; 30us; 37us; 32us; 38us; 14us; 5us; 32768us; 0us; 34us; 11us; 69us; 20us; 63us; 37us; 32us; 38us; 33us; 0us; 16395us; 5us; 32768us; 0us; 34us; 11us; 69us; 20us; 63us; 37us; 32us; 38us; 33us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 9us; 16402us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 5us; 16403us; 1us; 68us; 2us; 67us; 12us; 55us; 13us; 56us; 24us; 65us; 7us; 16404us; 1us; 68us; 2us; 67us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 7us; 16405us; 1us; 68us; 2us; 67us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 7us; 16406us; 1us; 68us; 2us; 67us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 11us; 32768us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 21us; 64us; 24us; 65us; 17us; 32768us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 14us; 70us; 15us; 71us; 16us; 74us; 17us; 75us; 18us; 72us; 19us; 73us; 21us; 64us; 24us; 65us; 11us; 32768us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 25us; 66us; 2us; 16409us; 12us; 55us; 13us; 56us; 2us; 16410us; 12us; 55us; 13us; 56us; 16us; 32768us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 14us; 70us; 15us; 71us; 16us; 74us; 17us; 75us; 18us; 72us; 19us; 73us; 24us; 65us; 10us; 16412us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 10us; 16413us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 10us; 16414us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 10us; 16415us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 10us; 16416us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 10us; 16417us; 1us; 68us; 2us; 67us; 4us; 59us; 5us; 60us; 6us; 57us; 7us; 58us; 9us; 61us; 12us; 55us; 13us; 56us; 24us; 65us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 5us; 32768us; 0us; 34us; 11us; 69us; 20us; 63us; 37us; 32us; 38us; 33us; 0us; 16407us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 0us; 16408us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 0us; 16411us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 4us; 32768us; 0us; 34us; 20us; 62us; 37us; 32us; 38us; 33us; 1us; 32768us; 21us; 77us; 0us; 16418us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 11us; 22us; 23us; 26us; 29us; 34us; 36us; 42us; 43us; 45us; 48us; 51us; 57us; 59us; 61us; 66us; 67us; 69us; 71us; 79us; 91us; 97us; 102us; 103us; 114us; 115us; 123us; 129us; 130us; 136us; 137us; 138us; 139us; 144us; 145us; 146us; 147us; 157us; 163us; 171us; 179us; 187us; 199us; 217us; 229us; 232us; 235us; 252us; 263us; 274us; 285us; 296us; 307us; 318us; 323us; 328us; 333us; 338us; 343us; 348us; 353us; 358us; 364us; 365us; 370us; 371us; 376us; 381us; 382us; 387us; 392us; 397us; 402us; 407us; 412us; 414us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 3us; 3us; 3us; 5us; 3us; 5us; 3us; 1us; 3us; 3us; 3us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 16393us; 65535us; 65535us; 16395us; 65535us; 16396us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 16408us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; |]
let _fsyacc_reductions ()  =    [| 
# 332 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startcExpression));
# 341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsp"
                                       Belief(_1) 
                   )
# 55 "Parser.fsp"
                 : D));
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : D)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : D)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsp"
                                                         BelievesSetSequence(_1,_3) 
                   )
# 56 "Parser.fsp"
                 : D));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Predicate)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsp"
                                                             Condition(_1,_3) 
                   )
# 58 "Parser.fsp"
                 : GC));
# 376 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : GC)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : GC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsp"
                                                            Else(_1,_3) 
                   )
# 59 "Parser.fsp"
                 : GC));
# 388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : D)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsp"
                                                          BelievesSet(_1,_4)
                   )
# 61 "Parser.fsp"
                 : C));
# 400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsp"
                                                         InitialValues(_1,_3) 
                   )
# 62 "Parser.fsp"
                 : C));
# 412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : D)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsp"
                                                                    InitialArray(_1,_4) 
                   )
# 63 "Parser.fsp"
                 : C));
# 424 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsp"
                                                            Assign(_1,_3)
                   )
# 64 "Parser.fsp"
                 : C));
# 436 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsp"
                                                            Skip 
                   )
# 66 "Parser.fsp"
                 : C));
# 446 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsp"
                                                            Sequence(_1,_3) 
                   )
# 67 "Parser.fsp"
                 : C));
# 458 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsp"
                                                            IfFi(_2) 
                   )
# 68 "Parser.fsp"
                 : C));
# 469 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsp"
                                                            DoOd(_2) 
                   )
# 69 "Parser.fsp"
                 : C));
# 480 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsp"
                                                             Num(_1) 
                   )
# 71 "Parser.fsp"
                 : a));
# 491 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsp"
                                                             True(_1) 
                   )
# 72 "Parser.fsp"
                 : a));
# 502 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsp"
                                                            Not(_2)
                   )
# 73 "Parser.fsp"
                 : a));
# 513 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsp"
                                                             And(_1,_3) 
                   )
# 74 "Parser.fsp"
                 : a));
# 525 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsp"
                                                             Or(_1,_3) 
                   )
# 75 "Parser.fsp"
                 : a));
# 537 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsp"
                                                             Addition(_1,_3) 
                   )
# 76 "Parser.fsp"
                 : a));
# 549 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsp"
                                                             Subtract(_1,_3) 
                   )
# 77 "Parser.fsp"
                 : a));
# 561 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsp"
                                                             Multiply(_1,_3) 
                   )
# 78 "Parser.fsp"
                 : a));
# 573 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsp"
                                                             Divide(_1,_3) 
                   )
# 79 "Parser.fsp"
                 : a));
# 585 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsp"
                                                             Power(_1,_3) 
                   )
# 80 "Parser.fsp"
                 : a));
# 597 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsp"
                                                             _2 
                   )
# 81 "Parser.fsp"
                 : a));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsp"
                                                             Array(_1,_3) 
                   )
# 82 "Parser.fsp"
                 : a));
# 620 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsp"
                                                              Implication(_1,_3)
                   )
# 83 "Parser.fsp"
                 : a));
# 632 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsp"
                                                                BiImplication(_1,_3)
                   )
# 84 "Parser.fsp"
                 : a));
# 644 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsp"
                                                             False 
                   )
# 86 "Parser.fsp"
                 : Predicate));
# 654 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsp"
                                                             Equal(_1,_3) 
                   )
# 87 "Parser.fsp"
                 : Predicate));
# 666 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsp"
                                                             NotEqual(_1,_3) 
                   )
# 88 "Parser.fsp"
                 : Predicate));
# 678 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsp"
                                                             GreaterThen(_1,_3) 
                   )
# 89 "Parser.fsp"
                 : Predicate));
# 690 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsp"
                                                             GreaterEqual(_1,_3) 
                   )
# 90 "Parser.fsp"
                 : Predicate));
# 702 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsp"
                                                             LessThen(_1,_3) 
                   )
# 91 "Parser.fsp"
                 : Predicate));
# 714 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsp"
                                                             LessEqual(_1,_3) 
                   )
# 92 "Parser.fsp"
                 : Predicate));
# 726 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Predicate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsp"
                                                             _2 
                   )
# 93 "Parser.fsp"
                 : Predicate));
|]
# 738 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 42;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let cExpression lexer lexbuf : C =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
