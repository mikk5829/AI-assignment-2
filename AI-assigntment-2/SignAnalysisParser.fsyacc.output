        Output file describing compiled parser placed in SignAnalysisParser.fs and SignAnalysisParser.fsi
------------------------
states = 
state 0:  items:    _startinit_Sign_C_Expression ->  . init_Sign_C_Expression
  actions:    action 'INITIALVALUES' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ADDITION' (noprec):   error
    action 'SUBTRACT' (noprec):   error
    action 'ZERO' (noprec):   error
    action 'POWER' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'SHORTAND' (noprec):   error
    action 'SHORTOR' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'NEG' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NEGEQUAL' (noprec):   error
    action 'LT' (noprec):   error
    action 'LTE' (noprec):   error
    action 'GT' (noprec):   error
    action 'GTE' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LCUR' (noprec):   error
    action 'RCUR' (noprec):   error
    action 'LBRA' (noprec):   error
    action 'RBRA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'ASSIGNARRAY' (noprec):   error
    action 'SEQUENCE' (noprec):   error
    action 'SKIP' (noprec):   error
    action 'IF' (noprec):   error
    action 'FI' (noprec):   error
    action 'DO' (noprec):   error
    action 'OD' (noprec):   error
    action 'CONDITION' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NUM' (noprec):   error
    action 'VAR' (noprec):   shift 2
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto init_Sign_C_Expression: 1
state 1:  items:    _startinit_Sign_C_Expression -> init_Sign_C_Expression . 
    init_Sign_C_Expression -> init_Sign_C_Expression . 'INITIALVALUES' init_Sign_C_Expression
  actions:    action 'INITIALVALUES' (explicit left 9990):   shift 9
    action 'MULTIPLY' (noprec):   accept
    action 'DIVIDE' (noprec):   accept
    action 'ADDITION' (noprec):   accept
    action 'SUBTRACT' (noprec):   accept
    action 'ZERO' (noprec):   accept
    action 'POWER' (noprec):   accept
    action 'TRUE' (noprec):   accept
    action 'FALSE' (noprec):   accept
    action 'SHORTAND' (noprec):   accept
    action 'SHORTOR' (noprec):   accept
    action 'AND' (noprec):   accept
    action 'OR' (noprec):   accept
    action 'NEG' (noprec):   accept
    action 'EQUAL' (noprec):   accept
    action 'NEGEQUAL' (noprec):   accept
    action 'LT' (noprec):   accept
    action 'LTE' (noprec):   accept
    action 'GT' (noprec):   accept
    action 'GTE' (noprec):   accept
    action 'LPAR' (noprec):   accept
    action 'RPAR' (noprec):   accept
    action 'LCUR' (noprec):   accept
    action 'RCUR' (noprec):   accept
    action 'LBRA' (noprec):   accept
    action 'RBRA' (noprec):   accept
    action 'ASSIGN' (noprec):   accept
    action 'ASSIGNARRAY' (noprec):   accept
    action 'SEQUENCE' (noprec):   accept
    action 'SKIP' (noprec):   accept
    action 'IF' (noprec):   accept
    action 'FI' (noprec):   accept
    action 'DO' (noprec):   accept
    action 'OD' (noprec):   accept
    action 'CONDITION' (noprec):   accept
    action 'ELSE' (noprec):   accept
    action 'EOF' (noprec):   accept
    action 'NUM' (noprec):   accept
    action 'VAR' (noprec):   accept
    action 'error' (noprec):   accept
    action '#' (noprec):   accept
    action '$$' (noprec):   accept
  immediate action: <none>  gotos:state 2:  items:    init_Sign_C_Expression -> 'VAR' . 'EQUAL' init_Sign_A_Expression
    init_Sign_C_Expression -> 'VAR' . 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
  actions:    action 'INITIALVALUES' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ADDITION' (noprec):   error
    action 'SUBTRACT' (noprec):   error
    action 'ZERO' (noprec):   error
    action 'POWER' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'SHORTAND' (noprec):   error
    action 'SHORTOR' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'NEG' (noprec):   error
    action 'EQUAL' (explicit left 9992):   shift 3
    action 'NEGEQUAL' (noprec):   error
    action 'LT' (noprec):   error
    action 'LTE' (noprec):   error
    action 'GT' (noprec):   error
    action 'GTE' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LCUR' (noprec):   error
    action 'RCUR' (noprec):   error
    action 'LBRA' (noprec):   error
    action 'RBRA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'ASSIGNARRAY' (noprec):   error
    action 'SEQUENCE' (noprec):   error
    action 'SKIP' (noprec):   error
    action 'IF' (noprec):   error
    action 'FI' (noprec):   error
    action 'DO' (noprec):   error
    action 'OD' (noprec):   error
    action 'CONDITION' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NUM' (noprec):   error
    action 'VAR' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 3:  items:    init_Sign_C_Expression -> 'VAR' 'EQUAL' . init_Sign_A_Expression
    init_Sign_C_Expression -> 'VAR' 'EQUAL' . 'LCUR' init_Sign_A_Expression 'RCUR'
  actions:    action 'INITIALVALUES' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ADDITION' (explicit left 9994):   shift 13
    action 'SUBTRACT' (explicit left 9997):   shift 14
    action 'ZERO' (noprec):   shift 15
    action 'POWER' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'SHORTAND' (noprec):   error
    action 'SHORTOR' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'NEG' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NEGEQUAL' (noprec):   error
    action 'LT' (noprec):   error
    action 'LTE' (noprec):   error
    action 'GT' (noprec):   error
    action 'GTE' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LCUR' (explicit left 9991):   shift 5
    action 'RCUR' (noprec):   error
    action 'LBRA' (noprec):   error
    action 'RBRA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'ASSIGNARRAY' (noprec):   error
    action 'SEQUENCE' (noprec):   error
    action 'SKIP' (noprec):   error
    action 'IF' (noprec):   error
    action 'FI' (noprec):   error
    action 'DO' (noprec):   error
    action 'OD' (noprec):   error
    action 'CONDITION' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NUM' (noprec):   shift 10
    action 'VAR' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto init_Sign_A_Expression: 4
state 4:  items:    init_Sign_C_Expression -> 'VAR' 'EQUAL' init_Sign_A_Expression . 
    init_Sign_A_Expression -> init_Sign_A_Expression . 'INITIALVALUES' init_Sign_A_Expression
  actions:    action 'INITIALVALUES' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'MULTIPLY' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'DIVIDE' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'ADDITION' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'SUBTRACT' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'ZERO' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'POWER' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'TRUE' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'FALSE' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'SHORTAND' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'SHORTOR' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'AND' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'OR' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'NEG' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'EQUAL' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'NEGEQUAL' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'LT' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'LTE' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'GT' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'GTE' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'LPAR' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'RPAR' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'LCUR' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'RCUR' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'LBRA' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'RBRA' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'ASSIGN' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'ASSIGNARRAY' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'SEQUENCE' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'SKIP' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'IF' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'FI' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'DO' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'OD' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'CONDITION' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'ELSE' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'EOF' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'NUM' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'VAR' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action 'error' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action '#' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
    action '$$' (explicit left 9992):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' init_Sign_A_Expression
  immediate action: <none>  gotos:state 5:  items:    init_Sign_C_Expression -> 'VAR' 'EQUAL' 'LCUR' . init_Sign_A_Expression 'RCUR'
  actions:    action 'INITIALVALUES' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ADDITION' (explicit left 9994):   shift 13
    action 'SUBTRACT' (explicit left 9997):   shift 14
    action 'ZERO' (noprec):   shift 15
    action 'POWER' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'SHORTAND' (noprec):   error
    action 'SHORTOR' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'NEG' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NEGEQUAL' (noprec):   error
    action 'LT' (noprec):   error
    action 'LTE' (noprec):   error
    action 'GT' (noprec):   error
    action 'GTE' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LCUR' (noprec):   error
    action 'RCUR' (noprec):   error
    action 'LBRA' (noprec):   error
    action 'RBRA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'ASSIGNARRAY' (noprec):   error
    action 'SEQUENCE' (noprec):   error
    action 'SKIP' (noprec):   error
    action 'IF' (noprec):   error
    action 'FI' (noprec):   error
    action 'DO' (noprec):   error
    action 'OD' (noprec):   error
    action 'CONDITION' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NUM' (noprec):   shift 10
    action 'VAR' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto init_Sign_A_Expression: 6
state 6:  items:    init_Sign_C_Expression -> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression . 'RCUR'
    init_Sign_A_Expression -> init_Sign_A_Expression . 'INITIALVALUES' init_Sign_A_Expression
  actions:    action 'INITIALVALUES' (explicit left 9990):   shift 12
    action 'MULTIPLY' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ADDITION' (noprec):   error
    action 'SUBTRACT' (noprec):   error
    action 'ZERO' (noprec):   error
    action 'POWER' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'SHORTAND' (noprec):   error
    action 'SHORTOR' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'NEG' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NEGEQUAL' (noprec):   error
    action 'LT' (noprec):   error
    action 'LTE' (noprec):   error
    action 'GT' (noprec):   error
    action 'GTE' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LCUR' (noprec):   error
    action 'RCUR' (explicit left 9991):   shift 7
    action 'LBRA' (noprec):   error
    action 'RBRA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'ASSIGNARRAY' (noprec):   error
    action 'SEQUENCE' (noprec):   error
    action 'SKIP' (noprec):   error
    action 'IF' (noprec):   error
    action 'FI' (noprec):   error
    action 'DO' (noprec):   error
    action 'OD' (noprec):   error
    action 'CONDITION' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NUM' (noprec):   error
    action 'VAR' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 7:  items:    init_Sign_C_Expression -> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR' . 
  actions:    action 'INITIALVALUES' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'MULTIPLY' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'DIVIDE' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'ADDITION' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'SUBTRACT' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'ZERO' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'POWER' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'TRUE' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'FALSE' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'SHORTAND' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'SHORTOR' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'AND' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'OR' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'NEG' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'EQUAL' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'NEGEQUAL' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'LT' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'LTE' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'GT' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'GTE' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'LPAR' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'RPAR' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'LCUR' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'RCUR' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'LBRA' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'RBRA' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'ASSIGN' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'ASSIGNARRAY' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'SEQUENCE' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'SKIP' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'IF' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'FI' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'DO' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'OD' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'CONDITION' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'ELSE' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'EOF' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'NUM' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'VAR' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action 'error' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action '#' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
    action '$$' (explicit left 9991):   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'
  immediate action:   reduce init_Sign_C_Expression --> 'VAR' 'EQUAL' 'LCUR' init_Sign_A_Expression 'RCUR'  gotos:state 8:  items:    init_Sign_C_Expression -> init_Sign_C_Expression . 'INITIALVALUES' init_Sign_C_Expression
    init_Sign_C_Expression -> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression . 
  actions:    action 'INITIALVALUES' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'MULTIPLY' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'DIVIDE' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'ADDITION' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'SUBTRACT' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'ZERO' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'POWER' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'TRUE' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'FALSE' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'SHORTAND' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'SHORTOR' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'AND' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'OR' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'NEG' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'EQUAL' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'NEGEQUAL' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'LT' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'LTE' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'GT' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'GTE' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'LPAR' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'RPAR' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'LCUR' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'RCUR' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'LBRA' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'RBRA' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'ASSIGN' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'ASSIGNARRAY' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'SEQUENCE' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'SKIP' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'IF' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'FI' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'DO' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'OD' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'CONDITION' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'ELSE' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'EOF' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'NUM' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'VAR' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action 'error' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action '#' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
    action '$$' (explicit left 9990):   reduce init_Sign_C_Expression --> init_Sign_C_Expression 'INITIALVALUES' init_Sign_C_Expression
  immediate action: <none>  gotos:state 9:  items:    init_Sign_C_Expression -> init_Sign_C_Expression 'INITIALVALUES' . init_Sign_C_Expression
  actions:    action 'INITIALVALUES' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ADDITION' (noprec):   error
    action 'SUBTRACT' (noprec):   error
    action 'ZERO' (noprec):   error
    action 'POWER' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'SHORTAND' (noprec):   error
    action 'SHORTOR' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'NEG' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NEGEQUAL' (noprec):   error
    action 'LT' (noprec):   error
    action 'LTE' (noprec):   error
    action 'GT' (noprec):   error
    action 'GTE' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LCUR' (noprec):   error
    action 'RCUR' (noprec):   error
    action 'LBRA' (noprec):   error
    action 'RBRA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'ASSIGNARRAY' (noprec):   error
    action 'SEQUENCE' (noprec):   error
    action 'SKIP' (noprec):   error
    action 'IF' (noprec):   error
    action 'FI' (noprec):   error
    action 'DO' (noprec):   error
    action 'OD' (noprec):   error
    action 'CONDITION' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NUM' (noprec):   error
    action 'VAR' (noprec):   shift 2
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto init_Sign_C_Expression: 8
state 10:  items:    init_Sign_A_Expression -> 'NUM' . 
  actions:    action 'INITIALVALUES' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'MULTIPLY' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'DIVIDE' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'ADDITION' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'SUBTRACT' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'ZERO' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'POWER' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'TRUE' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'FALSE' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'SHORTAND' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'SHORTOR' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'AND' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'OR' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'NEG' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'EQUAL' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'NEGEQUAL' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'LT' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'LTE' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'GT' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'GTE' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'LPAR' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'RPAR' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'LCUR' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'RCUR' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'LBRA' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'RBRA' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'ASSIGN' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'ASSIGNARRAY' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'SEQUENCE' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'SKIP' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'IF' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'FI' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'DO' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'OD' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'CONDITION' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'ELSE' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'EOF' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'NUM' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'VAR' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action 'error' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action '#' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
    action '$$' (noprec):   reduce init_Sign_A_Expression --> 'NUM'
  immediate action:   reduce init_Sign_A_Expression --> 'NUM'  gotos:state 11:  items:    init_Sign_A_Expression -> init_Sign_A_Expression . 'INITIALVALUES' init_Sign_A_Expression
    init_Sign_A_Expression -> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression . 
  actions:    action 'INITIALVALUES' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'MULTIPLY' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'DIVIDE' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'ADDITION' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'SUBTRACT' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'ZERO' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'POWER' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'TRUE' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'FALSE' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'SHORTAND' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'SHORTOR' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'AND' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'OR' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'NEG' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'EQUAL' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'NEGEQUAL' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'LT' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'LTE' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'GT' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'GTE' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'LPAR' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'RPAR' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'LCUR' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'RCUR' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'LBRA' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'RBRA' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'ASSIGN' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'ASSIGNARRAY' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'SEQUENCE' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'SKIP' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'IF' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'FI' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'DO' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'OD' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'CONDITION' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'ELSE' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'EOF' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'NUM' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'VAR' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action 'error' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action '#' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
    action '$$' (explicit left 9990):   reduce init_Sign_A_Expression --> init_Sign_A_Expression 'INITIALVALUES' init_Sign_A_Expression
  immediate action: <none>  gotos:state 12:  items:    init_Sign_A_Expression -> init_Sign_A_Expression 'INITIALVALUES' . init_Sign_A_Expression
  actions:    action 'INITIALVALUES' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'DIVIDE' (noprec):   error
    action 'ADDITION' (explicit left 9994):   shift 13
    action 'SUBTRACT' (explicit left 9997):   shift 14
    action 'ZERO' (noprec):   shift 15
    action 'POWER' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'SHORTAND' (noprec):   error
    action 'SHORTOR' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'NEG' (noprec):   error
    action 'EQUAL' (noprec):   error
    action 'NEGEQUAL' (noprec):   error
    action 'LT' (noprec):   error
    action 'LTE' (noprec):   error
    action 'GT' (noprec):   error
    action 'GTE' (noprec):   error
    action 'LPAR' (noprec):   error
    action 'RPAR' (noprec):   error
    action 'LCUR' (noprec):   error
    action 'RCUR' (noprec):   error
    action 'LBRA' (noprec):   error
    action 'RBRA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'ASSIGNARRAY' (noprec):   error
    action 'SEQUENCE' (noprec):   error
    action 'SKIP' (noprec):   error
    action 'IF' (noprec):   error
    action 'FI' (noprec):   error
    action 'DO' (noprec):   error
    action 'OD' (noprec):   error
    action 'CONDITION' (noprec):   error
    action 'ELSE' (noprec):   error
    action 'EOF' (noprec):   error
    action 'NUM' (noprec):   shift 10
    action 'VAR' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto init_Sign_A_Expression: 11
state 13:  items:    init_Sign_A_Expression -> 'ADDITION' . 
  actions:    action 'INITIALVALUES' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'MULTIPLY' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'DIVIDE' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'ADDITION' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'SUBTRACT' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'ZERO' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'POWER' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'TRUE' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'FALSE' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'SHORTAND' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'SHORTOR' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'AND' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'OR' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'NEG' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'EQUAL' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'NEGEQUAL' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'LT' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'LTE' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'GT' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'GTE' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'LPAR' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'RPAR' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'LCUR' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'RCUR' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'LBRA' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'RBRA' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'ASSIGN' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'ASSIGNARRAY' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'SEQUENCE' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'SKIP' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'IF' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'FI' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'DO' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'OD' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'CONDITION' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'ELSE' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'EOF' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'NUM' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'VAR' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action 'error' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action '#' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
    action '$$' (explicit left 9994):   reduce init_Sign_A_Expression --> 'ADDITION'
  immediate action:   reduce init_Sign_A_Expression --> 'ADDITION'  gotos:state 14:  items:    init_Sign_A_Expression -> 'SUBTRACT' . 
  actions:    action 'INITIALVALUES' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'MULTIPLY' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'DIVIDE' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'ADDITION' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'SUBTRACT' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'ZERO' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'POWER' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'TRUE' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'FALSE' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'SHORTAND' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'SHORTOR' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'AND' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'OR' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'NEG' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'EQUAL' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'NEGEQUAL' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'LT' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'LTE' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'GT' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'GTE' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'LPAR' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'RPAR' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'LCUR' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'RCUR' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'LBRA' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'RBRA' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'ASSIGN' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'ASSIGNARRAY' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'SEQUENCE' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'SKIP' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'IF' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'FI' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'DO' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'OD' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'CONDITION' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'ELSE' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'EOF' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'NUM' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'VAR' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action 'error' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action '#' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
    action '$$' (explicit left 9997):   reduce init_Sign_A_Expression --> 'SUBTRACT'
  immediate action:   reduce init_Sign_A_Expression --> 'SUBTRACT'  gotos:state 15:  items:    init_Sign_A_Expression -> 'ZERO' . 
  actions:    action 'INITIALVALUES' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'MULTIPLY' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'DIVIDE' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'ADDITION' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'SUBTRACT' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'ZERO' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'POWER' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'TRUE' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'FALSE' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'SHORTAND' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'SHORTOR' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'AND' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'OR' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'NEG' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'EQUAL' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'NEGEQUAL' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'LT' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'LTE' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'GT' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'GTE' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'LPAR' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'RPAR' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'LCUR' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'RCUR' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'LBRA' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'RBRA' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'ASSIGN' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'ASSIGNARRAY' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'SEQUENCE' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'SKIP' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'IF' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'FI' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'DO' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'OD' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'CONDITION' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'ELSE' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'EOF' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'NUM' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'VAR' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action 'error' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action '#' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
    action '$$' (noprec):   reduce init_Sign_A_Expression --> 'ZERO'
  immediate action:   reduce init_Sign_A_Expression --> 'ZERO'  gotos:
startStates = 0
------------------------
