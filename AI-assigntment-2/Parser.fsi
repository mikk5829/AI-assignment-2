// Signature file for parser generated by fsyacc
module Parser
type token = 
  | NOT
  | BIIMPLICATION
  | IMPLICATION
  | COMMA
  | TRUE
  | FALSE
  | AND
  | OR
  | EQUAL
  | LPAR
  | RPAR
  | LCUR
  | RCUR
  | EOF
  | NUM of (float)
  | VAR of (string)
type tokenId = 
    | TOKEN_NOT
    | TOKEN_BIIMPLICATION
    | TOKEN_IMPLICATION
    | TOKEN_COMMA
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EQUAL
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_EOF
    | TOKEN_NUM
    | TOKEN_VAR
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startcExpression
    | NONTERM_dExpression
    | NONTERM_cExpression
    | NONTERM_aExpression
    | NONTERM_bExpression
    | NONTERM_array_values
    | NONTERM_rev_values
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val cExpression : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (C) 
